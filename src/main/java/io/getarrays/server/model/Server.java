package io.getarrays.server.model;

import io.getarrays.server.enumeration.Status;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.validation.constraints.NotEmpty;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import static jakarta.persistence.GenerationType.AUTO;


@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Server {
    @Id
    @GeneratedValue(strategy = AUTO)
    private Long serverId;

    @Column(unique = true)  //ip address should be unique
    @NotEmpty(message = "IP Address can't be empty or null")
    private String ipAddress;

    //private String serverName;
    private String name;
    //private String serverMemory;
    private String memory;
    private String type;
    private String imageUrl;
    private Status status;


}


/*    В приведенном коде используются аннотации (аннотации Jakarta Persistence API), которые предоставляют метаданные о
      классе Server для работы с базой данных. Вот описание аннотаций, используемых в коде:

        1. @Entity:
        Аннотация @Entity указывает, что класс Server является сущностью (Entity) базы данных.
        Это означает, что объекты этого класса будут сохраняться и извлекаться из базы данных.
        Каждый объект Server будет представлять отдельную запись в таблице базы данных.

        2. @Data:
        Аннотация @Data, предоставляемая Lombok (библиотека для автоматической генерации кода),
        генерирует стандартные методы доступа (getters, setters), методы equals, hashCode на основе полей класса.

        3. @NoArgsConstructor:
        Аннотация @NoArgsConstructor (Lombok) генерирует конструктор без аргументов, который может быть использован
        для создания сущностей Server без необходимости передачи аргументов конструктору.

        4. @AllArgsConstructor:
        Аннотация @AllArgsConstructor (Lombok) генерирует конструктор со всеми аргументами,
        которые присутствуют в классе. В данном случае, этот конструктор позволяет передать все значения
        полей класса при создании объекта Server.

        5. @Id:
        Аннотация @Id указывает, что поле serverId является первичным ключом (Primary Key) сущности Server.
        Поле serverId будет использоваться для уникальной идентификации каждого объекта Server в базе данных.

        6. @GeneratedValue:
        Аннотация @GeneratedValue используется совместно с аннотацией @Id и указывает, как будет генерироваться значение
        для поля serverId. В данном случае, strategy = AUTO означает, что значение будет автоматически генерироваться
        базой данных (в зависимости от используемого провайдера базы данных).

        Таким образом, эти аннотации позволяют определить класс Server как сущность базы данных, указать первичный ключ,
        определить поля и их типы, а также предоставить базовые методы доступа и конструкторы для работы с этой сущностью.



        Метаданные в контексте работы с базой данных представляют собой информацию о структуре данных и связях между
        объектами, необходимую для правильной работы с базой данных.

        В случае аннотаций, используемых для работы с базами данных, они предоставляют информацию о классе его полях, которая включает:

            1. Типы полей: Метаданные определяют типы данных полей класса. Например, в случае класса Server, метаданные указывают,
            что ipAddress, serverName, serverMemory, type, imageUrl и status являются строковыми значениями.

            2. Имя таблицы и колонок: Метаданные также определяют имя таблицы базы данных, в которую будет сохраняться объект Server. Каждое поле класса может быть связано с отдельной колонкой в базе данных.

3. Ограничения и связи: Метаданные могут указывать ограничения, которые применяются к полям данных, такие как уникальность, ограничения на длину строки или внешние ключи. Они также могут определять связи между объектами, такие как отношения "один к одному", "один ко многим" или "многие ко многим".

4. Идентификаторы: Метаданные могут содержать информацию о первичном ключе класса, который используется для уникальной идентификации объекта Server в базе данных.

Метаданные упрощают выполнение различных задач, связанных с базами данных, таких как создание таблиц, запросы, обновление и удаление данных, а также управление связями и ограничениями. Они позволяют программе понимать структуру и свойства класса, что упрощает взаимодействие с базой данных и обеспечивает соответствие требованиям хранения данных.

*/
